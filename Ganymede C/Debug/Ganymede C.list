
Ganymede C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f0  080030f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030f8  080030f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  0800310c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  0800310c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000970c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b37  00000000  00000000  00029783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081d  00000000  00000000  0002bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000184d  00000000  00000000  0002c57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b97d  00000000  00000000  0002ddca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006934f  00000000  00000000  00039747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002614  00000000  00000000  000a2a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000a50ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030bc 	.word	0x080030bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080030bc 	.word	0x080030bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fc0c 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f85a 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f9f8 	bl	80008a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004b8:	f000 f918 	bl	80006ec <MX_TIM2_Init>
  MX_TIM21_Init();
 80004bc:	f000 f96c 	bl	8000798 <MX_TIM21_Init>
  MX_RTC_Init();
 80004c0:	f000 f8ea 	bl	8000698 <MX_RTC_Init>
  MX_LPTIM1_Init();
 80004c4:	f000 f8be 	bl	8000644 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80004c8:	23a0      	movs	r3, #160	; 0xa0
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	2200      	movs	r2, #0
 80004ce:	2101      	movs	r1, #1
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fed1 	bl	8001278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80004d6:	23a0      	movs	r3, #160	; 0xa0
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	2200      	movs	r2, #0
 80004dc:	2102      	movs	r1, #2
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 feca 	bl	8001278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2200      	movs	r2, #0
 80004ea:	2104      	movs	r1, #4
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fec3 	bl	8001278 <HAL_GPIO_WritePin>
    //uint32_t pwmValues[] = {0, 5, 10, 15, 20, 25, 30, 35,40,45,50,55,60,65,70,75,80,85,90,95,100,100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0 };
    //uint32_t PIRVals[] = {5000,0,5000,0,5000,5000,0,5000,0,5000};



    HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_1);
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <main+0xb4>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	0018      	movs	r0, r3
 80004f8:	f002 f832 	bl	8002560 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_2);
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <main+0xb4>)
 80004fe:	2104      	movs	r1, #4
 8000500:	0018      	movs	r0, r3
 8000502:	f002 f82d 	bl	8002560 <HAL_TIM_PWM_Start>
    //HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmValues, 40);
    //HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)PIRVals, 10);
    //HAL_Delay(5000);
   // SetPinB1ToOutput();
   /// HAL_GPIO_WritePin(GPIOA, PIR2_IO_Pin, GPIO_PIN_RESET);
    HAL_Delay(1000);
 8000506:	23fa      	movs	r3, #250	; 0xfa
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fc4c 	bl	8000da8 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim2);
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <main+0xb8>)
 8000512:	0018      	movs	r0, r3
 8000514:	f001 ff98 	bl	8002448 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {               //beginIRScan();
	  	  	  	  TIM21-> CCR1 = 18;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <main+0xbc>)
 800051a:	2212      	movs	r2, #18
 800051c:	635a      	str	r2, [r3, #52]	; 0x34
	  		  	  HAL_Delay(500);
 800051e:	23fa      	movs	r3, #250	; 0xfa
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fc40 	bl	8000da8 <HAL_Delay>
	  		  	  TIM21 -> CCR1 = 0;
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <main+0xbc>)
 800052a:	2200      	movs	r2, #0
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
	  		  	  HAL_Delay(500);
 800052e:	23fa      	movs	r3, #250	; 0xfa
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fc38 	bl	8000da8 <HAL_Delay>
	  		  	  TIM21 -> CCR2 = 18;
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0xbc>)
 800053a:	2212      	movs	r2, #18
 800053c:	639a      	str	r2, [r3, #56]	; 0x38
	  		  	  HAL_Delay(500);
 800053e:	23fa      	movs	r3, #250	; 0xfa
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fc30 	bl	8000da8 <HAL_Delay>
	  		  	  TIM21 -> CCR2 = 0;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <main+0xbc>)
 800054a:	2200      	movs	r2, #0
 800054c:	639a      	str	r2, [r3, #56]	; 0x38
	  		  	  HAL_Delay(500);
 800054e:	23fa      	movs	r3, #250	; 0xfa
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fc28 	bl	8000da8 <HAL_Delay>
	  	  	  	  TIM21-> CCR1 = 18;
 8000558:	e7de      	b.n	8000518 <main+0x70>
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	200000bc 	.word	0x200000bc
 8000560:	2000007c 	.word	0x2000007c
 8000564:	40010800 	.word	0x40010800

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b099      	sub	sp, #100	; 0x64
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	242c      	movs	r4, #44	; 0x2c
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2334      	movs	r3, #52	; 0x34
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f002 fd73 	bl	8003064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057e:	2318      	movs	r3, #24
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	0018      	movs	r0, r3
 8000584:	2314      	movs	r3, #20
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f002 fd6b 	bl	8003064 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	2318      	movs	r3, #24
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 fd64 	bl	8003064 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <SystemClock_Config+0xd8>)
 80005a2:	401a      	ands	r2, r3
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <SystemClock_Config+0xd4>)
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	0109      	lsls	r1, r1, #4
 80005aa:	430a      	orrs	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005ae:	0021      	movs	r1, r4
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	220a      	movs	r2, #10
 80005b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2210      	movs	r2, #16
 80005c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2201      	movs	r2, #1
 80005c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 ff31 	bl	8001438 <HAL_RCC_OscConfig>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005da:	f000 fa2b 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	2118      	movs	r1, #24
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	220f      	movs	r2, #15
 80005e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2201      	movs	r2, #1
 80005ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2100      	movs	r1, #0
 8000602:	0018      	movs	r0, r3
 8000604:	f001 fa94 	bl	8001b30 <HAL_RCC_ClockConfig>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800060c:	f000 fa12 	bl	8000a34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8000610:	003b      	movs	r3, r7
 8000612:	22a0      	movs	r2, #160	; 0xa0
 8000614:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000616:	003b      	movs	r3, r7
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	0292      	lsls	r2, r2, #10
 800061c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	003b      	movs	r3, r7
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fc70 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000630:	f000 fa00 	bl	8000a34 <Error_Handler>
  }
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b019      	add	sp, #100	; 0x64
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40007000 	.word	0x40007000
 8000640:	ffffe7ff 	.word	0xffffe7ff

08000644 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_LPTIM1_Init+0x48>)
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <MX_LPTIM1_Init+0x4c>)
 800064c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_LPTIM1_Init+0x48>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_LPTIM1_Init+0x48>)
 8000656:	22e0      	movs	r2, #224	; 0xe0
 8000658:	0112      	lsls	r2, r2, #4
 800065a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_LPTIM1_Init+0x48>)
 800065e:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <MX_LPTIM1_Init+0x50>)
 8000660:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_LPTIM1_Init+0x48>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_LPTIM1_Init+0x48>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_LPTIM1_Init+0x48>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_LPTIM1_Init+0x48>)
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fe52 	bl	8001320 <HAL_LPTIM_Init>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 8000680:	f000 f9d8 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000028 	.word	0x20000028
 8000690:	40007c00 	.word	0x40007c00
 8000694:	0000ffff 	.word	0x0000ffff

08000698 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_RTC_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_RTC_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_RTC_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_RTC_Init+0x4c>)
 80006aa:	227f      	movs	r2, #127	; 0x7f
 80006ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_RTC_Init+0x4c>)
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_RTC_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_RTC_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_RTC_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_RTC_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_RTC_Init+0x4c>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fd48 	bl	8002164 <HAL_RTC_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80006d8:	f000 f9ac 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000058 	.word	0x20000058
 80006e8:	40002800 	.word	0x40002800

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	2308      	movs	r3, #8
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	0018      	movs	r0, r3
 80006f8:	2310      	movs	r3, #16
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f002 fcb1 	bl	8003064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	003b      	movs	r3, r7
 8000704:	0018      	movs	r0, r3
 8000706:	2308      	movs	r3, #8
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f002 fcaa 	bl	8003064 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_TIM2_Init+0xa0>)
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	05d2      	lsls	r2, r2, #23
 8000716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_TIM2_Init+0xa0>)
 800071a:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <MX_TIM2_Init+0xa4>)
 800071c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_TIM2_Init+0xa0>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_TIM2_Init+0xa0>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_TIM2_Init+0xa8>)
 8000728:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_TIM2_Init+0xa0>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_TIM2_Init+0xa0>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_TIM2_Init+0xa0>)
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fe45 	bl	80023c8 <HAL_TIM_Base_Init>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000742:	f000 f977 	bl	8000a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000746:	2108      	movs	r1, #8
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	0152      	lsls	r2, r2, #5
 800074e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000750:	187a      	adds	r2, r7, r1
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_TIM2_Init+0xa0>)
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f002 f934 	bl	80029c4 <HAL_TIM_ConfigClockSource>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000760:	f000 f968 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	003b      	movs	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076a:	003b      	movs	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000770:	003a      	movs	r2, r7
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_TIM2_Init+0xa0>)
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f002 fc24 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000780:	f000 f958 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b006      	add	sp, #24
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000007c 	.word	0x2000007c
 8000790:	0000f9ff 	.word	0x0000f9ff
 8000794:	000003e7 	.word	0x000003e7

08000798 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	2318      	movs	r3, #24
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	2310      	movs	r3, #16
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f002 fc5b 	bl	8003064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	2310      	movs	r3, #16
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	0018      	movs	r0, r3
 80007b4:	2308      	movs	r3, #8
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f002 fc53 	bl	8003064 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	003b      	movs	r3, r7
 80007c0:	0018      	movs	r0, r3
 80007c2:	2310      	movs	r3, #16
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f002 fc4c 	bl	8003064 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80007cc:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <MX_TIM21_Init+0x108>)
 80007ce:	4a35      	ldr	r2, [pc, #212]	; (80008a4 <MX_TIM21_Init+0x10c>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 8-1;
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <MX_TIM21_Init+0x108>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_TIM21_Init+0x108>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 36-1;
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_TIM21_Init+0x108>)
 80007e0:	2223      	movs	r2, #35	; 0x23
 80007e2:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_TIM21_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_TIM21_Init+0x108>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_TIM21_Init+0x108>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fde8 	bl	80023c8 <HAL_TIM_Base_Init>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80007fc:	f000 f91a 	bl	8000a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	2118      	movs	r1, #24
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	0152      	lsls	r2, r2, #5
 8000808:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800080a:	187a      	adds	r2, r7, r1
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_TIM21_Init+0x108>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f002 f8d7 	bl	80029c4 <HAL_TIM_ConfigClockSource>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 800081a:	f000 f90b 	bl	8000a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_TIM21_Init+0x108>)
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fe55 	bl	80024d0 <HAL_TIM_PWM_Init>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800082a:	f000 f903 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2110      	movs	r1, #16
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800083c:	187a      	adds	r2, r7, r1
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM21_Init+0x108>)
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fbbe 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 800084c:	f000 f8f2 	bl	8000a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	003b      	movs	r3, r7
 8000852:	2260      	movs	r2, #96	; 0x60
 8000854:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000856:	003b      	movs	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	003b      	movs	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000868:	0039      	movs	r1, r7
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_TIM21_Init+0x108>)
 800086c:	2200      	movs	r2, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f001 ffe2 	bl	8002838 <HAL_TIM_PWM_ConfigChannel>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 8000878:	f000 f8dc 	bl	8000a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800087c:	0039      	movs	r1, r7
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_TIM21_Init+0x108>)
 8000880:	2204      	movs	r2, #4
 8000882:	0018      	movs	r0, r3
 8000884:	f001 ffd8 	bl	8002838 <HAL_TIM_PWM_ConfigChannel>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM21_Init+0xf8>
  {
    Error_Handler();
 800088c:	f000 f8d2 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <MX_TIM21_Init+0x108>)
 8000892:	0018      	movs	r0, r3
 8000894:	f000 f944 	bl	8000b20 <HAL_TIM_MspPostInit>

}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b00a      	add	sp, #40	; 0x28
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000bc 	.word	0x200000bc
 80008a4:	40010800 	.word	0x40010800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	; 0x24
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	240c      	movs	r4, #12
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	2314      	movs	r3, #20
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f002 fbd3 	bl	8003064 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b49      	ldr	r3, [pc, #292]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c2:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008c4:	2104      	movs	r1, #4
 80008c6:	430a      	orrs	r2, r1
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ca:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2204      	movs	r2, #4
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008da:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e2:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f2:	4b3c      	ldr	r3, [pc, #240]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008f4:	2102      	movs	r1, #2
 80008f6:	430a      	orrs	r2, r1
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fa:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80008fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fe:	2202      	movs	r2, #2
 8000900:	4013      	ands	r3, r2
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blue_Pin|Red_Pin|PIR2_SERIAL__Pin, GPIO_PIN_RESET);
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	2200      	movs	r2, #0
 800090c:	210d      	movs	r1, #13
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fcb2 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_SET);
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2201      	movs	r2, #1
 800091a:	2102      	movs	r1, #2
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fcab 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PROX_VERTICAL_Pin PROX_HORIZONTAL_Pin */
  GPIO_InitStruct.Pin = PROX_VERTICAL_Pin|PROX_HORIZONTAL_Pin;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	22c0      	movs	r2, #192	; 0xc0
 8000926:	0212      	lsls	r2, r2, #8
 8000928:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2288      	movs	r2, #136	; 0x88
 800092e:	0352      	lsls	r2, r2, #13
 8000930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	193b      	adds	r3, r7, r4
 800093a:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <MX_GPIO_Init+0x140>)
 800093c:	0019      	movs	r1, r3
 800093e:	0010      	movs	r0, r2
 8000940:	f000 fb34 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : Blue_Pin Green_Pin Red_Pin PIR2_SERIAL__Pin */
  GPIO_InitStruct.Pin = Blue_Pin|Green_Pin|Red_Pin|PIR2_SERIAL__Pin;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	220f      	movs	r2, #15
 8000948:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2201      	movs	r2, #1
 800094e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	193a      	adds	r2, r7, r4
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f000 fb21 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR1_Pin */
  GPIO_InitStruct.Pin = PIR1_Pin;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2210      	movs	r2, #16
 800096e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2288      	movs	r2, #136	; 0x88
 8000974:	0352      	lsls	r2, r2, #13
 8000976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PIR1_GPIO_Port, &GPIO_InitStruct);
 800097e:	193a      	adds	r2, r7, r4
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	0011      	movs	r1, r2
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fb10 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	22c4      	movs	r2, #196	; 0xc4
 8000996:	0392      	lsls	r2, r2, #14
 8000998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80009a0:	193a      	adds	r2, r7, r4
 80009a2:	23a0      	movs	r3, #160	; 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 faff 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR2_IO_Pin */
  GPIO_InitStruct.Pin = PIR2_IO_Pin;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2202      	movs	r2, #2
 80009b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PIR2_IO_GPIO_Port, &GPIO_InitStruct);
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <MX_GPIO_Init+0x144>)
 80009c4:	0019      	movs	r1, r3
 80009c6:	0010      	movs	r0, r2
 80009c8:	f000 faf0 	bl	8000fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2007      	movs	r0, #7
 80009d2:	f000 fab9 	bl	8000f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 facb 	bl	8000f72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */


/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b009      	add	sp, #36	; 0x24
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	50000800 	.word	0x50000800
 80009ec:	50000400 	.word	0x50000400

080009f0 <HAL_GPIO_EXTI_Callback>:
  }*/

//// Interrupts

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	801a      	strh	r2, [r3, #0]

    	  HBit = 1;
      }
*/

      if (GPIO_Pin == PIR1_Pin)
 80009fc:	1dbb      	adds	r3, r7, #6
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	2b10      	cmp	r3, #16
 8000a02:	d105      	bne.n	8000a10 <HAL_GPIO_EXTI_Callback+0x20>
          	    //HAL_GPIO_TogglePin(GPIOA, Green_Pin);
          	  //HAL_TIM_Base_Stop_IT(&htim2);
          	  //HAL_TIM_Base_Start_IT(&htim2);
    	        //HAL_GPIO_TogglePin(GPIOA,Red_Pin);

    	  	  	 HAL_GPIO_TogglePin(GPIOA,Red_Pin);
 8000a04:	23a0      	movs	r3, #160	; 0xa0
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	2104      	movs	r1, #4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fc51 	bl	80012b2 <HAL_GPIO_TogglePin>

            }
  }
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]


	  HAL_GPIO_TogglePin(GPIOA, Green_Pin);
 8000a20:	23a0      	movs	r3, #160	; 0xa0
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	2102      	movs	r1, #2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fc43 	bl	80012b2 <HAL_GPIO_TogglePin>
	{
		//HAL_TIM_Base_Stop_IT(&htim2);
		count = 0;
	}*/
	//HAL_GPIO_TogglePin(GPIOA, Green_Pin);
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_MspInit+0x24>)
 8000a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x24>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <HAL_MspInit+0x24>)
 8000a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_MspInit+0x24>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	0549      	lsls	r1, r1, #21
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_LPTIM_MspInit+0x28>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d106      	bne.n	8000a88 <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_LPTIM_MspInit+0x2c>)
 8000a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_LPTIM_MspInit+0x2c>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0609      	lsls	r1, r1, #24
 8000a84:	430a      	orrs	r2, r1
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40007c00 	.word	0x40007c00
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_RTC_MspInit+0x28>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d106      	bne.n	8000ab8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_RTC_MspInit+0x2c>)
 8000aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_RTC_MspInit+0x2c>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	02c9      	lsls	r1, r1, #11
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40002800 	.word	0x40002800
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d10e      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_TIM_Base_MspInit+0x50>)
 8000ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_TIM_Base_MspInit+0x50>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	200f      	movs	r0, #15
 8000aee:	f000 fa2b 	bl	8000f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 fa3d 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000af8:	e00a      	b.n	8000b10 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_TIM_Base_MspInit+0x54>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d105      	bne.n	8000b10 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <HAL_TIM_Base_MspInit+0x50>)
 8000b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_TIM_Base_MspInit+0x50>)
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b002      	add	sp, #8
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	240c      	movs	r4, #12
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2314      	movs	r3, #20
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f002 fa96 	bl	8003064 <memset>
  if(htim->Instance==TIM21)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <HAL_TIM_MspPostInit+0xa0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d13a      	bne.n	8000bb8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM21_MspPostInit 0 */

  /* USER CODE END TIM21_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_TIM_MspPostInit+0xa4>)
 8000b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_TIM_MspPostInit+0xa4>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_TIM_MspPostInit+0xa4>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b52:	2201      	movs	r2, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PA9     ------> TIM21_CH2
    PA10     ------> TIM21_CH1
    */
    GPIO_InitStruct.Pin = IR_2_Pin;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2202      	movs	r2, #2
 8000b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2205      	movs	r2, #5
 8000b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IR_2_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	193a      	adds	r2, r7, r4
 8000b7c:	23a0      	movs	r3, #160	; 0xa0
 8000b7e:	05db      	lsls	r3, r3, #23
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fa12 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR_1_Pin;
 8000b88:	0021      	movs	r1, r4
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	00d2      	lsls	r2, r2, #3
 8000b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2202      	movs	r2, #2
 8000b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IR_1_GPIO_Port, &GPIO_InitStruct);
 8000baa:	187a      	adds	r2, r7, r1
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 f9fa 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b009      	add	sp, #36	; 0x24
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f8c0 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR1_Pin);
 8000bfa:	2010      	movs	r0, #16
 8000bfc:	f000 fb74 	bl	80012e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000c00:	2080      	movs	r0, #128	; 0x80
 8000c02:	f000 fb71 	bl	80012e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PROX_VERTICAL_Pin);
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	01db      	lsls	r3, r3, #7
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 fb6c 	bl	80012e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PROX_HORIZONTAL_Pin);
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 fb67 	bl	80012e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <TIM2_IRQHandler+0x14>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 fd1e 	bl	8002668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	2000007c 	.word	0x2000007c

08000c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c44:	4813      	ldr	r0, [pc, #76]	; (8000c94 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c46:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c48:	f7ff fff6 	bl	8000c38 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000c4c:	4812      	ldr	r0, [pc, #72]	; (8000c98 <LoopForever+0x6>)
    LDR R1, [R0]
 8000c4e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c50:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <LoopForever+0xa>)
    CMP R1, R2
 8000c54:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c56:	d105      	bne.n	8000c64 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c5a:	4912      	ldr	r1, [pc, #72]	; (8000ca4 <LoopForever+0x12>)
    STR R1, [R0]
 8000c5c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c5e:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c60:	4912      	ldr	r1, [pc, #72]	; (8000cac <LoopForever+0x1a>)
    STR R1, [R0]
 8000c62:	6001      	str	r1, [r0, #0]

08000c64 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c66:	4913      	ldr	r1, [pc, #76]	; (8000cb4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <LoopForever+0x26>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000c7c:	4c10      	ldr	r4, [pc, #64]	; (8000cc0 <LoopForever+0x2e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f002 f9f3 	bl	8003074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc0b 	bl	80004a8 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
   ldr   r0, =_estack
 8000c94:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000c98:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c9c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000ca0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000ca4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ca8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000cac:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb8:	08003100 	.word	0x08003100
  ldr r2, =_sbss
 8000cbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc0:	20000100 	.word	0x20000100

08000cc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x3c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Init+0x3c>)
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f811 	bl	8000d08 <HAL_InitTick>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	e001      	b.n	8000cf6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf2:	f7ff fea5 	bl	8000a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d12:	681c      	ldr	r4, [r3, #0]
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	0019      	movs	r1, r3
 8000d1a:	23fa      	movs	r3, #250	; 0xfa
 8000d1c:	0098      	lsls	r0, r3, #2
 8000d1e:	f7ff f9f3 	bl	8000108 <__udivsi3>
 8000d22:	0003      	movs	r3, r0
 8000d24:	0019      	movs	r1, r3
 8000d26:	0020      	movs	r0, r4
 8000d28:	f7ff f9ee 	bl	8000108 <__udivsi3>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f92f 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e00f      	b.n	8000d5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d80b      	bhi.n	8000d5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f8fc 	bl	8000f48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_InitTick+0x64>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b003      	add	sp, #12
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	200000fc 	.word	0x200000fc

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	200000fc 	.word	0x200000fc

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fff0 	bl	8000d94 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	189b      	adds	r3, r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	f7ff ffe0 	bl	8000d94 <HAL_GetTick>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b004      	add	sp, #16
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b7f      	cmp	r3, #127	; 0x7f
 8000e02:	d809      	bhi.n	8000e18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	231f      	movs	r3, #31
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_EnableIRQ+0x30>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	4091      	lsls	r1, r2
 8000e14:	000a      	movs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b7f      	cmp	r3, #127	; 0x7f
 8000e38:	d828      	bhi.n	8000e8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <__NVIC_SetPriority+0xd4>)
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	33c0      	adds	r3, #192	; 0xc0
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	589b      	ldr	r3, [r3, r2]
 8000e4a:	1dfa      	adds	r2, r7, #7
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	0011      	movs	r1, r2
 8000e50:	2203      	movs	r2, #3
 8000e52:	400a      	ands	r2, r1
 8000e54:	00d2      	lsls	r2, r2, #3
 8000e56:	21ff      	movs	r1, #255	; 0xff
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	401a      	ands	r2, r3
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2303      	movs	r3, #3
 8000e72:	4003      	ands	r3, r0
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <__NVIC_SetPriority+0xd4>)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	430a      	orrs	r2, r1
 8000e84:	33c0      	adds	r3, #192	; 0xc0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e8a:	e031      	b.n	8000ef0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0019      	movs	r1, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	400b      	ands	r3, r1
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3306      	adds	r3, #6
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1dfa      	adds	r2, r7, #7
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	2203      	movs	r2, #3
 8000eae:	400a      	ands	r2, r1
 8000eb0:	00d2      	lsls	r2, r2, #3
 8000eb2:	21ff      	movs	r1, #255	; 0xff
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2303      	movs	r3, #3
 8000ece:	4003      	ands	r3, r0
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <__NVIC_SetPriority+0xd8>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	001c      	movs	r4, r3
 8000edc:	230f      	movs	r3, #15
 8000ede:	4023      	ands	r3, r4
 8000ee0:	3b08      	subs	r3, #8
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	3306      	adds	r3, #6
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	18c3      	adds	r3, r0, r3
 8000eec:	3304      	adds	r3, #4
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b003      	add	sp, #12
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	045b      	lsls	r3, r3, #17
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d301      	bcc.n	8000f18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f14:	2301      	movs	r3, #1
 8000f16:	e010      	b.n	8000f3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SysTick_Config+0x44>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	3a01      	subs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f20:	2301      	movs	r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	2103      	movs	r1, #3
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff ff7c 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x44>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x44>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	210f      	movs	r1, #15
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	1c02      	adds	r2, r0, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	0002      	movs	r2, r0
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ff33 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ffaf 	bl	8000f00 <SysTick_Config>
 8000fa2:	0003      	movs	r3, r0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fc2:	e143      	b.n	800124c <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d100      	bne.n	8000fdc <HAL_GPIO_Init+0x30>
 8000fda:	e134      	b.n	8001246 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	409a      	lsls	r2, r3
 8001002:	0013      	movs	r3, r2
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	2201      	movs	r2, #1
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2203      	movs	r2, #3
 800105c:	4013      	ands	r3, r2
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2203      	movs	r2, #3
 8001098:	4013      	ands	r3, r2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	58d3      	ldr	r3, [r2, r3]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2207      	movs	r2, #7
 80010b0:	4013      	ands	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2107      	movs	r1, #7
 80010ca:	400b      	ands	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	6939      	ldr	r1, [r7, #16]
 80010e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	401a      	ands	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	029b      	lsls	r3, r3, #10
 8001122:	4013      	ands	r3, r2
 8001124:	d100      	bne.n	8001128 <HAL_GPIO_Init+0x17c>
 8001126:	e08e      	b.n	8001246 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <HAL_GPIO_Init+0x2b8>)
 800112a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112c:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <HAL_GPIO_Init+0x2b8>)
 800112e:	2101      	movs	r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001134:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <HAL_GPIO_Init+0x2bc>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	589b      	ldr	r3, [r3, r2]
 8001140:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2203      	movs	r2, #3
 8001146:	4013      	ands	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	23a0      	movs	r3, #160	; 0xa0
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	429a      	cmp	r2, r3
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x1d2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a41      	ldr	r2, [pc, #260]	; (800126c <HAL_GPIO_Init+0x2c0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x1ce>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a40      	ldr	r2, [pc, #256]	; (8001270 <HAL_GPIO_Init+0x2c4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x1ca>
 8001172:	2302      	movs	r3, #2
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x1d4>
 8001176:	2306      	movs	r3, #6
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x1d4>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x1d4>
 800117e:	2300      	movs	r3, #0
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	2103      	movs	r1, #3
 8001184:	400a      	ands	r2, r1
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	; (8001268 <HAL_GPIO_Init+0x2bc>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	035b      	lsls	r3, r3, #13
 80011b6:	4013      	ands	r3, r2
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43da      	mvns	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	039b      	lsls	r3, r3, #14
 80011e0:	4013      	ands	r3, r2
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ec:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	029b      	lsls	r3, r3, #10
 800120a:	4013      	ands	r3, r2
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43da      	mvns	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	4013      	ands	r3, r2
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_GPIO_Init+0x2c8>)
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	40da      	lsrs	r2, r3
 8001254:	1e13      	subs	r3, r2, #0
 8001256:	d000      	beq.n	800125a <HAL_GPIO_Init+0x2ae>
 8001258:	e6b4      	b.n	8000fc4 <HAL_GPIO_Init+0x18>
  }
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b006      	add	sp, #24
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000
 800126c:	50000400 	.word	0x50000400
 8001270:	50000800 	.word	0x50000800
 8001274:	40010400 	.word	0x40010400

08001278 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	0008      	movs	r0, r1
 8001282:	0011      	movs	r1, r2
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	1c02      	adds	r2, r0, #0
 8001288:	801a      	strh	r2, [r3, #0]
 800128a:	1c7b      	adds	r3, r7, #1
 800128c:	1c0a      	adds	r2, r1, #0
 800128e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001290:	1c7b      	adds	r3, r7, #1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001298:	1cbb      	adds	r3, r7, #2
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80012a2:	1cbb      	adds	r3, r7, #2
 80012a4:	881a      	ldrh	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	000a      	movs	r2, r1
 80012bc:	1cbb      	adds	r3, r7, #2
 80012be:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c6:	1cbb      	adds	r3, r7, #2
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4013      	ands	r3, r2
 80012ce:	041a      	lsls	r2, r3, #16
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	1cb9      	adds	r1, r7, #2
 80012d6:	8809      	ldrh	r1, [r1, #0]
 80012d8:	400b      	ands	r3, r1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	0002      	movs	r2, r0
 80012f0:	1dbb      	adds	r3, r7, #6
 80012f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	1dba      	adds	r2, r7, #6
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	4013      	ands	r3, r2
 80012fe:	d008      	beq.n	8001312 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001302:	1dba      	adds	r2, r7, #6
 8001304:	8812      	ldrh	r2, [r2, #0]
 8001306:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001308:	1dbb      	adds	r3, r7, #6
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff fb6f 	bl	80009f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e078      	b.n	8001424 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	222e      	movs	r2, #46	; 0x2e
 8001336:	5c9b      	ldrb	r3, [r3, r2]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	222d      	movs	r2, #45	; 0x2d
 8001342:	2100      	movs	r1, #0
 8001344:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fb8d 	bl	8000a68 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	222e      	movs	r2, #46	; 0x2e
 8001352:	2102      	movs	r1, #2
 8001354:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d005      	beq.n	8001372 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	429a      	cmp	r2, r3
 8001370:	d103      	bne.n	800137a <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	221e      	movs	r2, #30
 8001376:	4393      	bics	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a2b      	ldr	r2, [pc, #172]	; (800142c <HAL_LPTIM_Init+0x10c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d003      	beq.n	800138c <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4a2a      	ldr	r2, [pc, #168]	; (8001430 <HAL_LPTIM_Init+0x110>)
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4a29      	ldr	r2, [pc, #164]	; (8001434 <HAL_LPTIM_Init+0x114>)
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800139c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80013a2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80013a8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80013ae:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d107      	bne.n	80013ce <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80013c6:	4313      	orrs	r3, r2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	041b      	lsls	r3, r3, #16
 80013de:	429a      	cmp	r2, r3
 80013e0:	d107      	bne.n	80013f2 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80013ea:	4313      	orrs	r3, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a0d      	ldr	r2, [pc, #52]	; (800142c <HAL_LPTIM_Init+0x10c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00a      	beq.n	8001412 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001404:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800140a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	222e      	movs	r2, #46	; 0x2e
 800141e:	2101      	movs	r1, #1
 8001420:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bd80      	pop	{r7, pc}
 800142c:	0000ffff 	.word	0x0000ffff
 8001430:	ffff1f3f 	.word	0xffff1f3f
 8001434:	ff19f1fe 	.word	0xff19f1fe

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f000 fb6c 	bl	8001b24 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144c:	4bc8      	ldr	r3, [pc, #800]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001456:	4bc6      	ldr	r3, [pc, #792]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x36>
 800146c:	e07d      	b.n	800156a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	2b08      	cmp	r3, #8
 8001472:	d007      	beq.n	8001484 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d112      	bne.n	80014a0 <HAL_RCC_OscConfig+0x68>
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	025b      	lsls	r3, r3, #9
 8001480:	429a      	cmp	r2, r3
 8001482:	d10d      	bne.n	80014a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4bba      	ldr	r3, [pc, #744]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	029b      	lsls	r3, r3, #10
 800148c:	4013      	ands	r3, r2
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x5a>
 8001490:	e06a      	b.n	8001568 <HAL_RCC_OscConfig+0x130>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d166      	bne.n	8001568 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f000 fb42 	bl	8001b24 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	025b      	lsls	r3, r3, #9
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d107      	bne.n	80014bc <HAL_RCC_OscConfig+0x84>
 80014ac:	4bb0      	ldr	r3, [pc, #704]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4baf      	ldr	r3, [pc, #700]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0249      	lsls	r1, r1, #9
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e027      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	23a0      	movs	r3, #160	; 0xa0
 80014c2:	02db      	lsls	r3, r3, #11
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d10e      	bne.n	80014e6 <HAL_RCC_OscConfig+0xae>
 80014c8:	4ba9      	ldr	r3, [pc, #676]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4ba8      	ldr	r3, [pc, #672]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	02c9      	lsls	r1, r1, #11
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	4ba6      	ldr	r3, [pc, #664]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4ba5      	ldr	r3, [pc, #660]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0249      	lsls	r1, r1, #9
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e012      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014e6:	4ba2      	ldr	r3, [pc, #648]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4ba1      	ldr	r3, [pc, #644]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014ec:	49a1      	ldr	r1, [pc, #644]	; (8001774 <HAL_RCC_OscConfig+0x33c>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	4b9f      	ldr	r3, [pc, #636]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	4013      	ands	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4b9b      	ldr	r3, [pc, #620]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b9a      	ldr	r3, [pc, #616]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001506:	499c      	ldr	r1, [pc, #624]	; (8001778 <HAL_RCC_OscConfig+0x340>)
 8001508:	400a      	ands	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d014      	beq.n	800153e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc3e 	bl	8000d94 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151e:	f7ff fc39 	bl	8000d94 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b64      	cmp	r3, #100	; 0x64
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e2f9      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001530:	4b8f      	ldr	r3, [pc, #572]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	029b      	lsls	r3, r3, #10
 8001538:	4013      	ands	r3, r2
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0xe6>
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fc29 	bl	8000d94 <HAL_GetTick>
 8001542:	0003      	movs	r3, r0
 8001544:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fc24 	bl	8000d94 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e2e4      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155a:	4b85      	ldr	r3, [pc, #532]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	4013      	ands	r3, r2
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x110>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x13e>
 8001574:	e099      	b.n	80016aa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	2220      	movs	r2, #32
 8001580:	4013      	ands	r3, r2
 8001582:	d009      	beq.n	8001598 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001584:	4b7a      	ldr	r3, [pc, #488]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b79      	ldr	r3, [pc, #484]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 800158a:	2120      	movs	r1, #32
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	2220      	movs	r2, #32
 8001594:	4393      	bics	r3, r2
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d13e      	bne.n	8001622 <HAL_RCC_OscConfig+0x1ea>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d13b      	bne.n	8001622 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015aa:	4b71      	ldr	r3, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2204      	movs	r2, #4
 80015b0:	4013      	ands	r3, r2
 80015b2:	d004      	beq.n	80015be <HAL_RCC_OscConfig+0x186>
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e2b2      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4a6e      	ldr	r2, [pc, #440]	; (800177c <HAL_RCC_OscConfig+0x344>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015d4:	4b66      	ldr	r3, [pc, #408]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2209      	movs	r2, #9
 80015da:	4393      	bics	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	4b64      	ldr	r3, [pc, #400]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80015e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015e6:	f000 fbeb 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 80015ea:	0001      	movs	r1, r0
 80015ec:	4b60      	ldr	r3, [pc, #384]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	220f      	movs	r2, #15
 80015f4:	4013      	ands	r3, r2
 80015f6:	4a62      	ldr	r2, [pc, #392]	; (8001780 <HAL_RCC_OscConfig+0x348>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	000a      	movs	r2, r1
 80015fc:	40da      	lsrs	r2, r3
 80015fe:	4b61      	ldr	r3, [pc, #388]	; (8001784 <HAL_RCC_OscConfig+0x34c>)
 8001600:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <HAL_RCC_OscConfig+0x350>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2513      	movs	r5, #19
 8001608:	197c      	adds	r4, r7, r5
 800160a:	0018      	movs	r0, r3
 800160c:	f7ff fb7c 	bl	8000d08 <HAL_InitTick>
 8001610:	0003      	movs	r3, r0
 8001612:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001614:	197b      	adds	r3, r7, r5
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d046      	beq.n	80016aa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800161c:	197b      	adds	r3, r7, r5
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	e280      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	2b00      	cmp	r3, #0
 8001626:	d027      	beq.n	8001678 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001628:	4b51      	ldr	r3, [pc, #324]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2209      	movs	r2, #9
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fbab 	bl	8000d94 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fba6 	bl	8000d94 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e266      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001656:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	4013      	ands	r3, r2
 800165e:	d0f1      	beq.n	8001644 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a45      	ldr	r2, [pc, #276]	; (800177c <HAL_RCC_OscConfig+0x344>)
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	021a      	lsls	r2, r3, #8
 8001670:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	e018      	b.n	80016aa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001678:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 800167e:	2101      	movs	r1, #1
 8001680:	438a      	bics	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fb86 	bl	8000d94 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fb81 	bl	8000d94 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e241      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016a0:	4b33      	ldr	r3, [pc, #204]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2204      	movs	r2, #4
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1f1      	bne.n	800168e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2210      	movs	r2, #16
 80016b0:	4013      	ands	r3, r2
 80016b2:	d100      	bne.n	80016b6 <HAL_RCC_OscConfig+0x27e>
 80016b4:	e0a1      	b.n	80017fa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d140      	bne.n	800173e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016bc:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x29c>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e227      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a2c      	ldr	r2, [pc, #176]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80016da:	4013      	ands	r3, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80016e4:	430a      	orrs	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	0a19      	lsrs	r1, r3, #8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	061a      	lsls	r2, r3, #24
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	0b5b      	lsrs	r3, r3, #13
 8001702:	3301      	adds	r3, #1
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	0212      	lsls	r2, r2, #8
 8001708:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	210f      	movs	r1, #15
 8001712:	400b      	ands	r3, r1
 8001714:	491a      	ldr	r1, [pc, #104]	; (8001780 <HAL_RCC_OscConfig+0x348>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_RCC_OscConfig+0x34c>)
 800171c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_RCC_OscConfig+0x350>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2513      	movs	r5, #19
 8001724:	197c      	adds	r4, r7, r5
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff faee 	bl	8000d08 <HAL_InitTick>
 800172c:	0003      	movs	r3, r0
 800172e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001730:	197b      	adds	r3, r7, r5
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d060      	beq.n	80017fa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001738:	197b      	adds	r3, r7, r5
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	e1f2      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d03f      	beq.n	80017c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_OscConfig+0x338>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0049      	lsls	r1, r1, #1
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb1e 	bl	8000d94 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800175c:	e018      	b.n	8001790 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800175e:	f7ff fb19 	bl	8000d94 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d911      	bls.n	8001790 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1d9      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
 8001770:	40021000 	.word	0x40021000
 8001774:	fffeffff 	.word	0xfffeffff
 8001778:	fffbffff 	.word	0xfffbffff
 800177c:	ffffe0ff 	.word	0xffffe0ff
 8001780:	080030d4 	.word	0x080030d4
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004
 800178c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001790:	4bc9      	ldr	r3, [pc, #804]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d0e0      	beq.n	800175e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179c:	4bc6      	ldr	r3, [pc, #792]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4ac6      	ldr	r2, [pc, #792]	; (8001abc <HAL_RCC_OscConfig+0x684>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4bc3      	ldr	r3, [pc, #780]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b0:	4bc1      	ldr	r3, [pc, #772]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	0a19      	lsrs	r1, r3, #8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	061a      	lsls	r2, r3, #24
 80017be:	4bbe      	ldr	r3, [pc, #760]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	e019      	b.n	80017fa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c6:	4bbc      	ldr	r3, [pc, #752]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4bbb      	ldr	r3, [pc, #748]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80017cc:	49bc      	ldr	r1, [pc, #752]	; (8001ac0 <HAL_RCC_OscConfig+0x688>)
 80017ce:	400a      	ands	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fadf 	bl	8000d94 <HAL_GetTick>
 80017d6:	0003      	movs	r3, r0
 80017d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017dc:	f7ff fada 	bl	8000d94 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e19a      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017ee:	4bb2      	ldr	r3, [pc, #712]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4013      	ands	r3, r2
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2208      	movs	r2, #8
 8001800:	4013      	ands	r3, r2
 8001802:	d036      	beq.n	8001872 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d019      	beq.n	8001840 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180c:	4baa      	ldr	r3, [pc, #680]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 800180e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001810:	4ba9      	ldr	r3, [pc, #676]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001812:	2101      	movs	r1, #1
 8001814:	430a      	orrs	r2, r1
 8001816:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff fabc 	bl	8000d94 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fab7 	bl	8000d94 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e177      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001834:	4ba0      	ldr	r3, [pc, #640]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001838:	2202      	movs	r2, #2
 800183a:	4013      	ands	r3, r2
 800183c:	d0f1      	beq.n	8001822 <HAL_RCC_OscConfig+0x3ea>
 800183e:	e018      	b.n	8001872 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b9d      	ldr	r3, [pc, #628]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001844:	4b9c      	ldr	r3, [pc, #624]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001846:	2101      	movs	r1, #1
 8001848:	438a      	bics	r2, r1
 800184a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff faa2 	bl	8000d94 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fa9d 	bl	8000d94 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e15d      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001868:	4b93      	ldr	r3, [pc, #588]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 800186a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d1f1      	bne.n	8001856 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2204      	movs	r2, #4
 8001878:	4013      	ands	r3, r2
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x446>
 800187c:	e0ae      	b.n	80019dc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187e:	2023      	movs	r0, #35	; 0x23
 8001880:	183b      	adds	r3, r7, r0
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b8c      	ldr	r3, [pc, #560]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	055b      	lsls	r3, r3, #21
 800188e:	4013      	ands	r3, r2
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001896:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	0549      	lsls	r1, r1, #21
 800189c:	430a      	orrs	r2, r1
 800189e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80018a0:	183b      	adds	r3, r7, r0
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b87      	ldr	r3, [pc, #540]	; (8001ac4 <HAL_RCC_OscConfig+0x68c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d11a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b84      	ldr	r3, [pc, #528]	; (8001ac4 <HAL_RCC_OscConfig+0x68c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <HAL_RCC_OscConfig+0x68c>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0049      	lsls	r1, r1, #1
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c0:	f7ff fa68 	bl	8000d94 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff fa63 	bl	8000d94 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b64      	cmp	r3, #100	; 0x64
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e123      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <HAL_RCC_OscConfig+0x68c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x4cc>
 80018f4:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80018f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0049      	lsls	r1, r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	651a      	str	r2, [r3, #80]	; 0x50
 8001902:	e031      	b.n	8001968 <HAL_RCC_OscConfig+0x530>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x4ee>
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 800190e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001910:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001912:	496b      	ldr	r1, [pc, #428]	; (8001ac0 <HAL_RCC_OscConfig+0x688>)
 8001914:	400a      	ands	r2, r1
 8001916:	651a      	str	r2, [r3, #80]	; 0x50
 8001918:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 800191a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 800191e:	496a      	ldr	r1, [pc, #424]	; (8001ac8 <HAL_RCC_OscConfig+0x690>)
 8001920:	400a      	ands	r2, r1
 8001922:	651a      	str	r2, [r3, #80]	; 0x50
 8001924:	e020      	b.n	8001968 <HAL_RCC_OscConfig+0x530>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	23a0      	movs	r3, #160	; 0xa0
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	429a      	cmp	r2, r3
 8001930:	d10e      	bne.n	8001950 <HAL_RCC_OscConfig+0x518>
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001936:	4b60      	ldr	r3, [pc, #384]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	00c9      	lsls	r1, r1, #3
 800193c:	430a      	orrs	r2, r1
 800193e:	651a      	str	r2, [r3, #80]	; 0x50
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001944:	4b5c      	ldr	r3, [pc, #368]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	0049      	lsls	r1, r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	651a      	str	r2, [r3, #80]	; 0x50
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x530>
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001956:	495a      	ldr	r1, [pc, #360]	; (8001ac0 <HAL_RCC_OscConfig+0x688>)
 8001958:	400a      	ands	r2, r1
 800195a:	651a      	str	r2, [r3, #80]	; 0x50
 800195c:	4b56      	ldr	r3, [pc, #344]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 800195e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001960:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001962:	4959      	ldr	r1, [pc, #356]	; (8001ac8 <HAL_RCC_OscConfig+0x690>)
 8001964:	400a      	ands	r2, r1
 8001966:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d015      	beq.n	800199c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff fa10 	bl	8000d94 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001978:	e009      	b.n	800198e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff fa0b 	bl	8000d94 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	4a51      	ldr	r2, [pc, #324]	; (8001acc <HAL_RCC_OscConfig+0x694>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0ca      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4013      	ands	r3, r2
 8001998:	d0ef      	beq.n	800197a <HAL_RCC_OscConfig+0x542>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff f9fa 	bl	8000d94 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019a4:	e009      	b.n	80019ba <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff f9f5 	bl	8000d94 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	4a46      	ldr	r2, [pc, #280]	; (8001acc <HAL_RCC_OscConfig+0x694>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0b4      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80019bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4013      	ands	r3, r2
 80019c4:	d1ef      	bne.n	80019a6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c6:	2323      	movs	r3, #35	; 0x23
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80019d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80019d6:	493e      	ldr	r1, [pc, #248]	; (8001ad0 <HAL_RCC_OscConfig+0x698>)
 80019d8:	400a      	ands	r2, r1
 80019da:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5ae>
 80019e4:	e09d      	b.n	8001b22 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	d100      	bne.n	80019ee <HAL_RCC_OscConfig+0x5b6>
 80019ec:	e076      	b.n	8001adc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d145      	bne.n	8001a82 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80019fc:	4935      	ldr	r1, [pc, #212]	; (8001ad4 <HAL_RCC_OscConfig+0x69c>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f9c7 	bl	8000d94 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f9c2 	bl	8000d94 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e082      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	049b      	lsls	r3, r3, #18
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4a2a      	ldr	r2, [pc, #168]	; (8001ad8 <HAL_RCC_OscConfig+0x6a0>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	431a      	orrs	r2, r3
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001a46:	430a      	orrs	r2, r1
 8001a48:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0449      	lsls	r1, r1, #17
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f99c 	bl	8000d94 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f997 	bl	8000d94 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e057      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	049b      	lsls	r3, r3, #18
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x62a>
 8001a80:	e04f      	b.n	8001b22 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001a88:	4912      	ldr	r1, [pc, #72]	; (8001ad4 <HAL_RCC_OscConfig+0x69c>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f981 	bl	8000d94 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f97c 	bl	8000d94 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e03c      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aaa:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	049b      	lsls	r3, r3, #18
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x660>
 8001ab6:	e034      	b.n	8001b22 <HAL_RCC_OscConfig+0x6ea>
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	ffff1fff 	.word	0xffff1fff
 8001ac0:	fffffeff 	.word	0xfffffeff
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	fffffbff 	.word	0xfffffbff
 8001acc:	00001388 	.word	0x00001388
 8001ad0:	efffffff 	.word	0xefffffff
 8001ad4:	feffffff 	.word	0xfeffffff
 8001ad8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_RCC_OscConfig+0x6f4>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	025b      	lsls	r3, r3, #9
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d10f      	bne.n	8001b1e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	23f0      	movs	r3, #240	; 0xf0
 8001b02:	039b      	lsls	r3, r3, #14
 8001b04:	401a      	ands	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	23c0      	movs	r3, #192	; 0xc0
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b00a      	add	sp, #40	; 0x28
 8001b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e128      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b96      	ldr	r3, [pc, #600]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d91e      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b93      	ldr	r3, [pc, #588]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	4393      	bics	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	4b90      	ldr	r3, [pc, #576]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f916 	bl	8000d94 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f911 	bl	8000d94 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a8a      	ldr	r2, [pc, #552]	; (8001da4 <HAL_RCC_ClockConfig+0x274>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e109      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b87      	ldr	r3, [pc, #540]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1ee      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9a:	4b83      	ldr	r3, [pc, #524]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	22f0      	movs	r2, #240	; 0xf0
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b7f      	ldr	r3, [pc, #508]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_ClockConfig+0x8a>
 8001bb8:	e089      	b.n	8001cce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc2:	4b79      	ldr	r3, [pc, #484]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	029b      	lsls	r3, r3, #10
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d120      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0e1      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bda:	4b73      	ldr	r3, [pc, #460]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	049b      	lsls	r3, r3, #18
 8001be2:	4013      	ands	r3, r2
 8001be4:	d114      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0d5      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d109      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0ca      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c00:	4b69      	ldr	r3, [pc, #420]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0c2      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c10:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2203      	movs	r2, #3
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4b62      	ldr	r3, [pc, #392]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff f8b6 	bl	8000d94 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d111      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c34:	e009      	b.n	8001c4a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c36:	f7ff f8ad 	bl	8000d94 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_RCC_ClockConfig+0x274>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e0a5      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	220c      	movs	r2, #12
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d1ef      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x106>
 8001c56:	e03a      	b.n	8001cce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d111      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c60:	e009      	b.n	8001c76 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c62:	f7ff f897 	bl	8000d94 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_RCC_ClockConfig+0x274>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e08f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c76:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d1ef      	bne.n	8001c62 <HAL_RCC_ClockConfig+0x132>
 8001c82:	e024      	b.n	8001cce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c8c:	e009      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8e:	f7ff f881 	bl	8000d94 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4a42      	ldr	r2, [pc, #264]	; (8001da4 <HAL_RCC_ClockConfig+0x274>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e079      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d1ef      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x15e>
 8001cae:	e00e      	b.n	8001cce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff f870 	bl	8000d94 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <HAL_RCC_ClockConfig+0x274>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e068      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cc4:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	220c      	movs	r2, #12
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d21e      	bcs.n	8001d1a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cdc:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4393      	bics	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cee:	f7ff f851 	bl	8000d94 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	e009      	b.n	8001d0c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f84c 	bl	8000d94 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <HAL_RCC_ClockConfig+0x274>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e044      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_ClockConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d1ee      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	4013      	ands	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a20      	ldr	r2, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x27c>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d00a      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <HAL_RCC_ClockConfig+0x280>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	00da      	lsls	r2, r3, #3
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d58:	f000 f832 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d5c:	0001      	movs	r1, r0
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_ClockConfig+0x278>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	220f      	movs	r2, #15
 8001d66:	4013      	ands	r3, r2
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_RCC_ClockConfig+0x284>)
 8001d6a:	5cd3      	ldrb	r3, [r2, r3]
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	40da      	lsrs	r2, r3
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_RCC_ClockConfig+0x288>)
 8001d72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_ClockConfig+0x28c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	250b      	movs	r5, #11
 8001d7a:	197c      	adds	r4, r7, r5
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7fe ffc3 	bl	8000d08 <HAL_InitTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d86:	197b      	adds	r3, r7, r5
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d8e:	197b      	adds	r3, r7, r5
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b004      	add	sp, #16
 8001d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	40022000 	.word	0x40022000
 8001da4:	00001388 	.word	0x00001388
 8001da8:	40021000 	.word	0x40021000
 8001dac:	fffff8ff 	.word	0xfffff8ff
 8001db0:	ffffc7ff 	.word	0xffffc7ff
 8001db4:	080030d4 	.word	0x080030d4
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dc6:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dce:	230c      	movs	r3, #12
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d014      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001dd6:	d900      	bls.n	8001dda <HAL_RCC_GetSysClockFreq+0x1a>
 8001dd8:	e07b      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x112>
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x24>
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d00b      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001de2:	e076      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001de4:	4b44      	ldr	r3, [pc, #272]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2210      	movs	r2, #16
 8001dea:	4013      	ands	r3, r2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001df2:	e07c      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x140>)
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df8:	e079      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x144>)
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfe:	e076      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	0c9a      	lsrs	r2, r3, #18
 8001e04:	230f      	movs	r3, #15
 8001e06:	401a      	ands	r2, r3
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x148>)
 8001e0a:	5c9b      	ldrb	r3, [r3, r2]
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	0d9a      	lsrs	r2, r3, #22
 8001e12:	2303      	movs	r3, #3
 8001e14:	4013      	ands	r3, r2
 8001e16:	3301      	adds	r3, #1
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e1a:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	4013      	ands	r3, r2
 8001e24:	d01a      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	4a35      	ldr	r2, [pc, #212]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e30:	2300      	movs	r3, #0
 8001e32:	69b8      	ldr	r0, [r7, #24]
 8001e34:	69f9      	ldr	r1, [r7, #28]
 8001e36:	f7fe fa13 	bl	8000260 <__aeabi_lmul>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	000b      	movs	r3, r1
 8001e3e:	0010      	movs	r0, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f7fe f9e7 	bl	8000220 <__aeabi_uldivmod>
 8001e52:	0002      	movs	r2, r0
 8001e54:	000b      	movs	r3, r1
 8001e56:	0013      	movs	r3, r2
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
 8001e5a:	e037      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2210      	movs	r2, #16
 8001e62:	4013      	ands	r3, r2
 8001e64:	d01a      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4a23      	ldr	r2, [pc, #140]	; (8001efc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e70:	2300      	movs	r3, #0
 8001e72:	68b8      	ldr	r0, [r7, #8]
 8001e74:	68f9      	ldr	r1, [r7, #12]
 8001e76:	f7fe f9f3 	bl	8000260 <__aeabi_lmul>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	000b      	movs	r3, r1
 8001e7e:	0010      	movs	r0, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f7fe f9c7 	bl	8000220 <__aeabi_uldivmod>
 8001e92:	0002      	movs	r2, r0
 8001e94:	000b      	movs	r3, r1
 8001e96:	0013      	movs	r3, r2
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9a:	e017      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x140>)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f7fe f9da 	bl	8000260 <__aeabi_lmul>
 8001eac:	0002      	movs	r2, r0
 8001eae:	000b      	movs	r3, r1
 8001eb0:	0010      	movs	r0, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	001c      	movs	r4, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	001d      	movs	r5, r3
 8001ebc:	0022      	movs	r2, r4
 8001ebe:	002b      	movs	r3, r5
 8001ec0:	f7fe f9ae 	bl	8000220 <__aeabi_uldivmod>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	000b      	movs	r3, r1
 8001ec8:	0013      	movs	r3, r2
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ed0:	e00d      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	0b5b      	lsrs	r3, r3, #13
 8001ed8:	2207      	movs	r2, #7
 8001eda:	4013      	ands	r3, r2
 8001edc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	0212      	lsls	r2, r2, #8
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b00e      	add	sp, #56	; 0x38
 8001ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	003d0900 	.word	0x003d0900
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	007a1200 	.word	0x007a1200
 8001f08:	080030e4 	.word	0x080030e4

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f14:	2017      	movs	r0, #23
 8001f16:	183b      	adds	r3, r7, r0
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2220      	movs	r2, #32
 8001f22:	4013      	ands	r3, r2
 8001f24:	d100      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001f26:	e0c7      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f28:	4b84      	ldr	r3, [pc, #528]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	055b      	lsls	r3, r3, #21
 8001f30:	4013      	ands	r3, r2
 8001f32:	d109      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	4b81      	ldr	r3, [pc, #516]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f38:	4b80      	ldr	r3, [pc, #512]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	0549      	lsls	r1, r1, #21
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f42:	183b      	adds	r3, r7, r0
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b7d      	ldr	r3, [pc, #500]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4013      	ands	r3, r2
 8001f52:	d11a      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f54:	4b7a      	ldr	r3, [pc, #488]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b79      	ldr	r3, [pc, #484]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	0049      	lsls	r1, r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7fe ff17 	bl	8000d94 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	e008      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7fe ff12 	bl	8000d94 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0d9      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f8a:	4b6c      	ldr	r3, [pc, #432]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
 8001f90:	039b      	lsls	r3, r3, #14
 8001f92:	4013      	ands	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	23c0      	movs	r3, #192	; 0xc0
 8001f9c:	039b      	lsls	r3, r3, #14
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d013      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	23c0      	movs	r3, #192	; 0xc0
 8001fac:	029b      	lsls	r3, r3, #10
 8001fae:	401a      	ands	r2, r3
 8001fb0:	23c0      	movs	r3, #192	; 0xc0
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d10a      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fb8:	4b60      	ldr	r3, [pc, #384]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d101      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0b1      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fce:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	029b      	lsls	r3, r3, #10
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d03b      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	4013      	ands	r3, r2
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d033      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d02e      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ffa:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002004:	4b4d      	ldr	r3, [pc, #308]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	0309      	lsls	r1, r1, #12
 800200e:	430a      	orrs	r2, r1
 8002010:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002018:	494b      	ldr	r1, [pc, #300]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800201a:	400a      	ands	r2, r1
 800201c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4013      	ands	r3, r2
 800202c:	d014      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe feb1 	bl	8000d94 <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002036:	e009      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe feac 	bl	8000d94 <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	4a42      	ldr	r2, [pc, #264]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e072      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800204e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d0ef      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2220      	movs	r2, #32
 800205e:	4013      	ands	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	23c0      	movs	r3, #192	; 0xc0
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	401a      	ands	r2, r3
 800206c:	23c0      	movs	r3, #192	; 0xc0
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	429a      	cmp	r2, r3
 8002072:	d10c      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a35      	ldr	r2, [pc, #212]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	23c0      	movs	r3, #192	; 0xc0
 8002084:	039b      	lsls	r3, r3, #14
 8002086:	401a      	ands	r2, r3
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002090:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	401a      	ands	r2, r3
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a2:	2317      	movs	r3, #23
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020b2:	4928      	ldr	r1, [pc, #160]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	220c      	movs	r2, #12
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2204      	movs	r2, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020f0:	430a      	orrs	r2, r1
 80020f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	4013      	ands	r3, r2
 80020fc:	d009      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800210e:	430a      	orrs	r2, r1
 8002110:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	4013      	ands	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800212c:	430a      	orrs	r2, r1
 800212e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b006      	add	sp, #24
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
 8002144:	fffcffff 	.word	0xfffcffff
 8002148:	fff7ffff 	.word	0xfff7ffff
 800214c:	00001388 	.word	0x00001388
 8002150:	ffcfffff 	.word	0xffcfffff
 8002154:	efffffff 	.word	0xefffffff
 8002158:	fffff3ff 	.word	0xfffff3ff
 800215c:	ffffcfff 	.word	0xffffcfff
 8002160:	fff3ffff 	.word	0xfff3ffff

08002164 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e088      	b.n	8002290 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2221      	movs	r2, #33	; 0x21
 8002182:	5c9b      	ldrb	r3, [r3, r2]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2220      	movs	r2, #32
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f7fe fc7f 	bl	8000a98 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2221      	movs	r2, #33	; 0x21
 800219e:	2102      	movs	r1, #2
 80021a0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2210      	movs	r2, #16
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d05f      	beq.n	8002270 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	22ca      	movs	r2, #202	; 0xca
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2253      	movs	r2, #83	; 0x53
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80021c0:	250f      	movs	r5, #15
 80021c2:	197c      	adds	r4, r7, r5
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f890 	bl	80022ec <RTC_EnterInitMode>
 80021cc:	0003      	movs	r3, r0
 80021ce:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80021d0:	0028      	movs	r0, r5
 80021d2:	183b      	adds	r3, r7, r0
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d12c      	bne.n	8002234 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	492c      	ldr	r1, [pc, #176]	; (8002298 <HAL_RTC_Init+0x134>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68d2      	ldr	r2, [r2, #12]
 8002210:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6919      	ldr	r1, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002226:	183c      	adds	r4, r7, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f8a2 	bl	8002374 <RTC_ExitInitMode>
 8002230:	0003      	movs	r3, r0
 8002232:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002234:	230f      	movs	r3, #15
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d113      	bne.n	8002266 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2103      	movs	r1, #3
 800224a:	438a      	bics	r2, r1
 800224c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
 800226e:	e003      	b.n	8002278 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002270:	230f      	movs	r3, #15
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002278:	230f      	movs	r3, #15
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2221      	movs	r2, #33	; 0x21
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800228a:	230f      	movs	r3, #15
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	781b      	ldrb	r3, [r3, #0]
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bdb0      	pop	{r4, r5, r7, pc}
 8002298:	ff8fffbf 	.word	0xff8fffbf

0800229c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_RTC_WaitForSynchro+0x4c>)
 80022ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b0:	f7fe fd70 	bl	8000d94 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022b8:	e00a      	b.n	80022d0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022ba:	f7fe fd6b 	bl	8000d94 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad2      	subs	r2, r2, r3
 80022c4:	23fa      	movs	r3, #250	; 0xfa
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d901      	bls.n	80022d0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e006      	b.n	80022de <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	4013      	ands	r3, r2
 80022da:	d0ee      	beq.n	80022ba <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	0001df5f 	.word	0x0001df5f

080022ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	230f      	movs	r3, #15
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	4013      	ands	r3, r2
 800230a:	d12c      	bne.n	8002366 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2180      	movs	r1, #128	; 0x80
 8002318:	430a      	orrs	r2, r1
 800231a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe fd3a 	bl	8000d94 <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002324:	e014      	b.n	8002350 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002326:	f7fe fd35 	bl	8000d94 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1ad2      	subs	r2, r2, r3
 8002330:	200f      	movs	r0, #15
 8002332:	183b      	adds	r3, r7, r0
 8002334:	1839      	adds	r1, r7, r0
 8002336:	7809      	ldrb	r1, [r1, #0]
 8002338:	7019      	strb	r1, [r3, #0]
 800233a:	23fa      	movs	r3, #250	; 0xfa
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	429a      	cmp	r2, r3
 8002340:	d906      	bls.n	8002350 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2221      	movs	r2, #33	; 0x21
 8002346:	2104      	movs	r1, #4
 8002348:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800234a:	183b      	adds	r3, r7, r0
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	4013      	ands	r3, r2
 800235a:	d104      	bne.n	8002366 <RTC_EnterInitMode+0x7a>
 800235c:	230f      	movs	r3, #15
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d1df      	bne.n	8002326 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002366:	230f      	movs	r3, #15
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	781b      	ldrb	r3, [r3, #0]
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}

08002374 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237c:	240f      	movs	r4, #15
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	438a      	bics	r2, r1
 8002392:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2220      	movs	r2, #32
 800239c:	4013      	ands	r3, r2
 800239e:	d10c      	bne.n	80023ba <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff ff7a 	bl	800229c <HAL_RTC_WaitForSynchro>
 80023a8:	1e03      	subs	r3, r0, #0
 80023aa:	d006      	beq.n	80023ba <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2221      	movs	r2, #33	; 0x21
 80023b0:	2104      	movs	r1, #4
 80023b2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80023ba:	230f      	movs	r3, #15
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b005      	add	sp, #20
 80023c6:	bd90      	pop	{r4, r7, pc}

080023c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e032      	b.n	8002440 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2239      	movs	r2, #57	; 0x39
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2238      	movs	r2, #56	; 0x38
 80023ea:	2100      	movs	r1, #0
 80023ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7fe fb69 	bl	8000ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2239      	movs	r2, #57	; 0x39
 80023fa:	2102      	movs	r1, #2
 80023fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	0019      	movs	r1, r3
 8002408:	0010      	movs	r0, r2
 800240a:	f000 fbcf 	bl	8002bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	223e      	movs	r2, #62	; 0x3e
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	223a      	movs	r2, #58	; 0x3a
 800241a:	2101      	movs	r1, #1
 800241c:	5499      	strb	r1, [r3, r2]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	223b      	movs	r2, #59	; 0x3b
 8002422:	2101      	movs	r1, #1
 8002424:	5499      	strb	r1, [r3, r2]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	223c      	movs	r2, #60	; 0x3c
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	223d      	movs	r2, #61	; 0x3d
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2239      	movs	r2, #57	; 0x39
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2239      	movs	r2, #57	; 0x39
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e031      	b.n	80024c4 <HAL_TIM_Base_Start_IT+0x7c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2239      	movs	r2, #57	; 0x39
 8002464:	2102      	movs	r1, #2
 8002466:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	05db      	lsls	r3, r3, #23
 8002480:	429a      	cmp	r2, r3
 8002482:	d004      	beq.n	800248e <HAL_TIM_Base_Start_IT+0x46>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a10      	ldr	r2, [pc, #64]	; (80024cc <HAL_TIM_Base_Start_IT+0x84>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d111      	bne.n	80024b2 <HAL_TIM_Base_Start_IT+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2207      	movs	r2, #7
 8002496:	4013      	ands	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d010      	beq.n	80024c2 <HAL_TIM_Base_Start_IT+0x7a>
    {
      __HAL_TIM_ENABLE(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2101      	movs	r1, #1
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b0:	e007      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0x7a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40010800 	.word	0x40010800

080024d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e032      	b.n	8002548 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2239      	movs	r2, #57	; 0x39
 80024e6:	5c9b      	ldrb	r3, [r3, r2]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2238      	movs	r2, #56	; 0x38
 80024f2:	2100      	movs	r1, #0
 80024f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 f829 	bl	8002550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2239      	movs	r2, #57	; 0x39
 8002502:	2102      	movs	r1, #2
 8002504:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	0019      	movs	r1, r3
 8002510:	0010      	movs	r0, r2
 8002512:	f000 fb4b 	bl	8002bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223e      	movs	r2, #62	; 0x3e
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	223a      	movs	r2, #58	; 0x3a
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	223b      	movs	r2, #59	; 0x3b
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223c      	movs	r2, #60	; 0x3c
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	223d      	movs	r2, #61	; 0x3d
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2239      	movs	r2, #57	; 0x39
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d108      	bne.n	8002582 <HAL_TIM_PWM_Start+0x22>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	223a      	movs	r2, #58	; 0x3a
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	1e5a      	subs	r2, r3, #1
 800257c:	4193      	sbcs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	e01f      	b.n	80025c2 <HAL_TIM_PWM_Start+0x62>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d108      	bne.n	800259a <HAL_TIM_PWM_Start+0x3a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	223b      	movs	r2, #59	; 0x3b
 800258c:	5c9b      	ldrb	r3, [r3, r2]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	1e5a      	subs	r2, r3, #1
 8002594:	4193      	sbcs	r3, r2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	e013      	b.n	80025c2 <HAL_TIM_PWM_Start+0x62>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d108      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x52>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	223c      	movs	r2, #60	; 0x3c
 80025a4:	5c9b      	ldrb	r3, [r3, r2]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	1e5a      	subs	r2, r3, #1
 80025ac:	4193      	sbcs	r3, r2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	e007      	b.n	80025c2 <HAL_TIM_PWM_Start+0x62>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	223d      	movs	r2, #61	; 0x3d
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	4193      	sbcs	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e048      	b.n	800265c <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <HAL_TIM_PWM_Start+0x7a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	223a      	movs	r2, #58	; 0x3a
 80025d4:	2102      	movs	r1, #2
 80025d6:	5499      	strb	r1, [r3, r2]
 80025d8:	e013      	b.n	8002602 <HAL_TIM_PWM_Start+0xa2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d104      	bne.n	80025ea <HAL_TIM_PWM_Start+0x8a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	223b      	movs	r2, #59	; 0x3b
 80025e4:	2102      	movs	r1, #2
 80025e6:	5499      	strb	r1, [r3, r2]
 80025e8:	e00b      	b.n	8002602 <HAL_TIM_PWM_Start+0xa2>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d104      	bne.n	80025fa <HAL_TIM_PWM_Start+0x9a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223c      	movs	r2, #60	; 0x3c
 80025f4:	2102      	movs	r1, #2
 80025f6:	5499      	strb	r1, [r3, r2]
 80025f8:	e003      	b.n	8002602 <HAL_TIM_PWM_Start+0xa2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223d      	movs	r2, #61	; 0x3d
 80025fe:	2102      	movs	r1, #2
 8002600:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	0018      	movs	r0, r3
 800260c:	f000 fcb6 	bl	8002f7c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	05db      	lsls	r3, r3, #23
 8002618:	429a      	cmp	r2, r3
 800261a:	d004      	beq.n	8002626 <HAL_TIM_PWM_Start+0xc6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_TIM_PWM_Start+0x104>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d111      	bne.n	800264a <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2207      	movs	r2, #7
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b06      	cmp	r3, #6
 8002636:	d010      	beq.n	800265a <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002648:	e007      	b.n	800265a <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40010800 	.word	0x40010800

08002668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2202      	movs	r2, #2
 8002678:	4013      	ands	r3, r2
 800267a:	2b02      	cmp	r3, #2
 800267c:	d124      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2202      	movs	r2, #2
 8002686:	4013      	ands	r3, r2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d11d      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2203      	movs	r2, #3
 8002692:	4252      	negs	r2, r2
 8002694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2203      	movs	r2, #3
 80026a4:	4013      	ands	r3, r2
 80026a6:	d004      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fa66 	bl	8002b7c <HAL_TIM_IC_CaptureCallback>
 80026b0:	e007      	b.n	80026c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fa59 	bl	8002b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 fa65 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2204      	movs	r2, #4
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d125      	bne.n	8002722 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11e      	bne.n	8002722 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2205      	movs	r2, #5
 80026ea:	4252      	negs	r2, r2
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	23c0      	movs	r3, #192	; 0xc0
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4013      	ands	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fa39 	bl	8002b7c <HAL_TIM_IC_CaptureCallback>
 800270a:	e007      	b.n	800271c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fa2c 	bl	8002b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	0018      	movs	r0, r3
 8002718:	f000 fa38 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2208      	movs	r2, #8
 800272a:	4013      	ands	r3, r2
 800272c:	2b08      	cmp	r3, #8
 800272e:	d124      	bne.n	800277a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2208      	movs	r2, #8
 8002738:	4013      	ands	r3, r2
 800273a:	2b08      	cmp	r3, #8
 800273c:	d11d      	bne.n	800277a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2209      	movs	r2, #9
 8002744:	4252      	negs	r2, r2
 8002746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2204      	movs	r2, #4
 800274c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2203      	movs	r2, #3
 8002756:	4013      	ands	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0018      	movs	r0, r3
 800275e:	f000 fa0d 	bl	8002b7c <HAL_TIM_IC_CaptureCallback>
 8002762:	e007      	b.n	8002774 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fa00 	bl	8002b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fa0c 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2210      	movs	r2, #16
 8002782:	4013      	ands	r3, r2
 8002784:	2b10      	cmp	r3, #16
 8002786:	d125      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2210      	movs	r2, #16
 8002790:	4013      	ands	r3, r2
 8002792:	2b10      	cmp	r3, #16
 8002794:	d11e      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2211      	movs	r2, #17
 800279c:	4252      	negs	r2, r2
 800279e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2208      	movs	r2, #8
 80027a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	23c0      	movs	r3, #192	; 0xc0
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 f9e0 	bl	8002b7c <HAL_TIM_IC_CaptureCallback>
 80027bc:	e007      	b.n	80027ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 f9d3 	bl	8002b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 f9df 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2201      	movs	r2, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10f      	bne.n	8002802 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2202      	movs	r2, #2
 80027f6:	4252      	negs	r2, r2
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fe f90b 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	4013      	ands	r3, r2
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d10f      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	4013      	ands	r3, r2
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d108      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2241      	movs	r2, #65	; 0x41
 8002824:	4252      	negs	r2, r2
 8002826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f9b6 	bl	8002b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2317      	movs	r3, #23
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2238      	movs	r2, #56	; 0x38
 8002850:	5c9b      	ldrb	r3, [r3, r2]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002856:	2302      	movs	r3, #2
 8002858:	e0ad      	b.n	80029b6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2238      	movs	r2, #56	; 0x38
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d100      	bne.n	800286a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002868:	e076      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x120>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0c      	cmp	r3, #12
 800286e:	d900      	bls.n	8002872 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002870:	e095      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d04e      	beq.n	8002916 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b08      	cmp	r3, #8
 800287c:	d900      	bls.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x48>
 800287e:	e08e      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d021      	beq.n	80028d0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800288c:	e087      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	0011      	movs	r1, r2
 8002896:	0018      	movs	r0, r3
 8002898:	f000 f9d2 	bl	8002c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2108      	movs	r1, #8
 80028a8:	430a      	orrs	r2, r1
 80028aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2104      	movs	r1, #4
 80028b8:	438a      	bics	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6999      	ldr	r1, [r3, #24]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	619a      	str	r2, [r3, #24]
      break;
 80028ce:	e06b      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 f9ed 	bl	8002cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	0109      	lsls	r1, r1, #4
 80028ec:	430a      	orrs	r2, r1
 80028ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4931      	ldr	r1, [pc, #196]	; (80029c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6999      	ldr	r1, [r3, #24]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	619a      	str	r2, [r3, #24]
      break;
 8002914:	e048      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	0011      	movs	r1, r2
 800291e:	0018      	movs	r0, r3
 8002920:	f000 fa0c 	bl	8002d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2108      	movs	r1, #8
 8002930:	430a      	orrs	r2, r1
 8002932:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2104      	movs	r1, #4
 8002940:	438a      	bics	r2, r1
 8002942:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69d9      	ldr	r1, [r3, #28]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	61da      	str	r2, [r3, #28]
      break;
 8002956:	e027      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f000 fa2b 	bl	8002dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	0109      	lsls	r1, r1, #4
 8002974:	430a      	orrs	r2, r1
 8002976:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	490f      	ldr	r1, [pc, #60]	; (80029c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002984:	400a      	ands	r2, r1
 8002986:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69d9      	ldr	r1, [r3, #28]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	021a      	lsls	r2, r3, #8
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
      break;
 800299c:	e004      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800299e:	2317      	movs	r3, #23
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
      break;
 80029a6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2238      	movs	r2, #56	; 0x38
 80029ac:	2100      	movs	r1, #0
 80029ae:	5499      	strb	r1, [r3, r2]

  return status;
 80029b0:	2317      	movs	r3, #23
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b006      	add	sp, #24
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	fffffbff 	.word	0xfffffbff

080029c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ce:	230f      	movs	r3, #15
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2238      	movs	r2, #56	; 0x38
 80029da:	5c9b      	ldrb	r3, [r3, r2]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIM_ConfigClockSource+0x20>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0bc      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x19a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2238      	movs	r2, #56	; 0x38
 80029e8:	2101      	movs	r1, #1
 80029ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2239      	movs	r2, #57	; 0x39
 80029f0:	2102      	movs	r1, #2
 80029f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2277      	movs	r2, #119	; 0x77
 8002a00:	4393      	bics	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4a58      	ldr	r2, [pc, #352]	; (8002b68 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0192      	lsls	r2, r2, #6
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d040      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0xde>
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0192      	lsls	r2, r2, #6
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d900      	bls.n	8002a2a <HAL_TIM_ConfigClockSource+0x66>
 8002a28:	e088      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
 8002a2a:	2280      	movs	r2, #128	; 0x80
 8002a2c:	0152      	lsls	r2, r2, #5
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d100      	bne.n	8002a34 <HAL_TIM_ConfigClockSource+0x70>
 8002a32:	e088      	b.n	8002b46 <HAL_TIM_ConfigClockSource+0x182>
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	0152      	lsls	r2, r2, #5
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d900      	bls.n	8002a3e <HAL_TIM_ConfigClockSource+0x7a>
 8002a3c:	e07e      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
 8002a3e:	2b70      	cmp	r3, #112	; 0x70
 8002a40:	d018      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0xb0>
 8002a42:	d900      	bls.n	8002a46 <HAL_TIM_ConfigClockSource+0x82>
 8002a44:	e07a      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
 8002a46:	2b60      	cmp	r3, #96	; 0x60
 8002a48:	d04f      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0x126>
 8002a4a:	d900      	bls.n	8002a4e <HAL_TIM_ConfigClockSource+0x8a>
 8002a4c:	e076      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
 8002a4e:	2b50      	cmp	r3, #80	; 0x50
 8002a50:	d03b      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x106>
 8002a52:	d900      	bls.n	8002a56 <HAL_TIM_ConfigClockSource+0x92>
 8002a54:	e072      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d057      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x146>
 8002a5a:	d900      	bls.n	8002a5e <HAL_TIM_ConfigClockSource+0x9a>
 8002a5c:	e06e      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
 8002a5e:	2b30      	cmp	r3, #48	; 0x30
 8002a60:	d063      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x166>
 8002a62:	d86b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d060      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x166>
 8002a68:	d868      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d05d      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x166>
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d05b      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x166>
 8002a72:	e063      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a84:	f000 fa5a 	bl	8002f3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2277      	movs	r2, #119	; 0x77
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	609a      	str	r2, [r3, #8]
      break;
 8002aa0:	e052      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ab2:	f000 fa43 	bl	8002f3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	01c9      	lsls	r1, r1, #7
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
      break;
 8002ac8:	e03e      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	f000 f9b6 	bl	8002e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2150      	movs	r1, #80	; 0x50
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 fa10 	bl	8002f08 <TIM_ITRx_SetConfig>
      break;
 8002ae8:	e02e      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af6:	001a      	movs	r2, r3
 8002af8:	f000 f9d4 	bl	8002ea4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2160      	movs	r1, #96	; 0x60
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fa00 	bl	8002f08 <TIM_ITRx_SetConfig>
      break;
 8002b08:	e01e      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	001a      	movs	r2, r3
 8002b18:	f000 f996 	bl	8002e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2140      	movs	r1, #64	; 0x40
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f9f0 	bl	8002f08 <TIM_ITRx_SetConfig>
      break;
 8002b28:	e00e      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0019      	movs	r1, r3
 8002b34:	0010      	movs	r0, r2
 8002b36:	f000 f9e7 	bl	8002f08 <TIM_ITRx_SetConfig>
      break;
 8002b3a:	e005      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
      break;
 8002b44:	e000      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b46:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2239      	movs	r2, #57	; 0x39
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2238      	movs	r2, #56	; 0x38
 8002b54:	2100      	movs	r1, #0
 8002b56:	5499      	strb	r1, [r3, r2]

  return status;
 8002b58:	230f      	movs	r3, #15
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	ffff00ff 	.word	0xffff00ff

08002b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	05db      	lsls	r3, r3, #23
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d003      	beq.n	8002bce <TIM_Base_SetConfig+0x22>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <TIM_Base_SetConfig+0x8c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d108      	bne.n	8002be0 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2270      	movs	r2, #112	; 0x70
 8002bd2:	4393      	bics	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	05db      	lsls	r3, r3, #23
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d003      	beq.n	8002bf2 <TIM_Base_SetConfig+0x46>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <TIM_Base_SetConfig+0x8c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d108      	bne.n	8002c04 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <TIM_Base_SetConfig+0x90>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	4393      	bics	r3, r2
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	615a      	str	r2, [r3, #20]
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b004      	add	sp, #16
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40010800 	.word	0x40010800
 8002c3c:	fffffcff 	.word	0xfffffcff

08002c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4393      	bics	r3, r2
 8002c52:	001a      	movs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2270      	movs	r2, #112	; 0x70
 8002c6e:	4393      	bics	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2203      	movs	r2, #3
 8002c76:	4393      	bics	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2202      	movs	r2, #2
 8002c88:	4393      	bics	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	621a      	str	r2, [r3, #32]
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b006      	add	sp, #24
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	4393      	bics	r3, r2
 8002cca:	001a      	movs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <TIM_OC2_SetConfig+0x7c>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <TIM_OC2_SetConfig+0x80>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2220      	movs	r2, #32
 8002d02:	4393      	bics	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	621a      	str	r2, [r3, #32]
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b006      	add	sp, #24
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	ffff8fff 	.word	0xffff8fff
 8002d38:	fffffcff 	.word	0xfffffcff

08002d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <TIM_OC3_SetConfig+0x78>)
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2270      	movs	r2, #112	; 0x70
 8002d68:	4393      	bics	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	4393      	bics	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <TIM_OC3_SetConfig+0x7c>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	621a      	str	r2, [r3, #32]
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b006      	add	sp, #24
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	fffffeff 	.word	0xfffffeff
 8002db8:	fffffdff 	.word	0xfffffdff

08002dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <TIM_OC4_SetConfig+0x7c>)
 8002dcc:	401a      	ands	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <TIM_OC4_SetConfig+0x80>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <TIM_OC4_SetConfig+0x84>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <TIM_OC4_SetConfig+0x88>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	031b      	lsls	r3, r3, #12
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b006      	add	sp, #24
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	ffffefff 	.word	0xffffefff
 8002e3c:	ffff8fff 	.word	0xffff8fff
 8002e40:	fffffcff 	.word	0xfffffcff
 8002e44:	ffffdfff 	.word	0xffffdfff

08002e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4393      	bics	r3, r2
 8002e62:	001a      	movs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	22f0      	movs	r2, #240	; 0xf0
 8002e72:	4393      	bics	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	220a      	movs	r2, #10
 8002e84:	4393      	bics	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	621a      	str	r2, [r3, #32]
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b006      	add	sp, #24
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	001a      	movs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <TIM_TI2_ConfigInputStage+0x60>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	031b      	lsls	r3, r3, #12
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	22a0      	movs	r2, #160	; 0xa0
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b006      	add	sp, #24
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	ffff0fff 	.word	0xffff0fff

08002f08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2270      	movs	r2, #112	; 0x70
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	2207      	movs	r2, #7
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	609a      	str	r2, [r3, #8]
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b004      	add	sp, #16
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <TIM_ETR_SetConfig+0x3c>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	021a      	lsls	r2, r3, #8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b006      	add	sp, #24
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	ffff00ff 	.word	0xffff00ff

08002f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	221f      	movs	r2, #31
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2201      	movs	r2, #1
 8002f90:	409a      	lsls	r2, r3
 8002f92:	0013      	movs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	43d2      	mvns	r2, r2
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1a      	ldr	r2, [r3, #32]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	211f      	movs	r1, #31
 8002fac:	400b      	ands	r3, r1
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4099      	lsls	r1, r3
 8002fb2:	000b      	movs	r3, r1
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2238      	movs	r2, #56	; 0x38
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e03d      	b.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2238      	movs	r2, #56	; 0x38
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2239      	movs	r2, #57	; 0x39
 8002fe8:	2102      	movs	r1, #2
 8002fea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2270      	movs	r2, #112	; 0x70
 8003000:	4393      	bics	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	05db      	lsls	r3, r3, #23
 800301e:	429a      	cmp	r2, r3
 8003020:	d004      	beq.n	800302c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10c      	bne.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	4393      	bics	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2239      	movs	r2, #57	; 0x39
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2238      	movs	r2, #56	; 0x38
 8003052:	2100      	movs	r1, #0
 8003054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	b004      	add	sp, #16
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40010800 	.word	0x40010800

08003064 <memset>:
 8003064:	0003      	movs	r3, r0
 8003066:	1882      	adds	r2, r0, r2
 8003068:	4293      	cmp	r3, r2
 800306a:	d100      	bne.n	800306e <memset+0xa>
 800306c:	4770      	bx	lr
 800306e:	7019      	strb	r1, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	e7f9      	b.n	8003068 <memset+0x4>

08003074 <__libc_init_array>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	2600      	movs	r6, #0
 8003078:	4c0c      	ldr	r4, [pc, #48]	; (80030ac <__libc_init_array+0x38>)
 800307a:	4d0d      	ldr	r5, [pc, #52]	; (80030b0 <__libc_init_array+0x3c>)
 800307c:	1b64      	subs	r4, r4, r5
 800307e:	10a4      	asrs	r4, r4, #2
 8003080:	42a6      	cmp	r6, r4
 8003082:	d109      	bne.n	8003098 <__libc_init_array+0x24>
 8003084:	2600      	movs	r6, #0
 8003086:	f000 f819 	bl	80030bc <_init>
 800308a:	4c0a      	ldr	r4, [pc, #40]	; (80030b4 <__libc_init_array+0x40>)
 800308c:	4d0a      	ldr	r5, [pc, #40]	; (80030b8 <__libc_init_array+0x44>)
 800308e:	1b64      	subs	r4, r4, r5
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	42a6      	cmp	r6, r4
 8003094:	d105      	bne.n	80030a2 <__libc_init_array+0x2e>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	00b3      	lsls	r3, r6, #2
 800309a:	58eb      	ldr	r3, [r5, r3]
 800309c:	4798      	blx	r3
 800309e:	3601      	adds	r6, #1
 80030a0:	e7ee      	b.n	8003080 <__libc_init_array+0xc>
 80030a2:	00b3      	lsls	r3, r6, #2
 80030a4:	58eb      	ldr	r3, [r5, r3]
 80030a6:	4798      	blx	r3
 80030a8:	3601      	adds	r6, #1
 80030aa:	e7f2      	b.n	8003092 <__libc_init_array+0x1e>
 80030ac:	080030f8 	.word	0x080030f8
 80030b0:	080030f8 	.word	0x080030f8
 80030b4:	080030fc 	.word	0x080030fc
 80030b8:	080030f8 	.word	0x080030f8

080030bc <_init>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr

080030c8 <_fini>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr
